#include <bits/stdc++.h>
using namespace std;
int findElement(vector<int> arr, int ranges[][2],
                int rotations, int index)
{
 
  // Track of the rotation number
  int n1 = 1;
 
  // Track of the row index for the ranges[][] array
  int i = 0;
 
  // Initialize the left side of the ranges[][] array
  int leftRange = 0;
 
  // Initialize the right side of the ranges[][] array
  int rightRange = 0;
 
  // Initialize the key variable
  int key = 0;
 
  while (n1 <= rotations) {
 
    leftRange = ranges[i][0];
    rightRange = ranges[i][1];
    key = arr[rightRange];
    for (int j = rightRange; j >= leftRange + 1; j--) {
      arr[j] = arr[j - 1];
    }
 
    arr[leftRange] = key;
 
    n1++;
    i++;
  }
 
  // Return the element after all the rotations
  return arr[index];
}
 
int main()
{
  vector<int> arr{ 1, 2, 3, 4, 5 };
 
  // No. of rotations
  int rotations = 2;
 
  // Ranges according to 0-based indexing
  int ranges[][2] = { { 0, 2 }, { 0, 3 } };
 
  int index = 1;
  cout << (findElement(arr, ranges, rotations, index));
}
 
// This code is contributed by garg28harsh.
